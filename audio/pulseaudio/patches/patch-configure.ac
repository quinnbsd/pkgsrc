$NetBSD: patch-configure.ac,v 1.15 2021/02/07 06:25:31 ryoon Exp $

* Don't assume sys/capability.h is guaranteed present on Linux.
* Fix NetBSD detection for libatomics_ops check.
* Fix unportable test(1) construct.
* Adapt /var-paths for pkgsrc defaults.
* Install default config files in example directory; pkgsrc config
  file framework will install them in the right place.
* Avoid hardcoded SDK paths on Darwin.
* Check for memfd_create instead of assuming libc does not define it.
  (Will be included in next release after 11.1)
* On Darwin, do not use macosx-version-min.

--- configure.ac.orig	2020-11-23 18:31:13.000000000 +0000
+++ configure.ac
@@ -21,7 +21,7 @@
 
 AC_PREREQ(2.63)
 
-AC_INIT([pulseaudio],[m4_esyscmd(./git-version-gen .tarball-version)],[pulseaudio-discuss (at) lists (dot) freedesktop (dot) org],[pulseaudio],[http://pulseaudio.org/])
+AC_INIT([pulseaudio],[14.2],[pulseaudio-discuss (at) lists (dot) freedesktop (dot) org],[pulseaudio],[http://pulseaudio.org/])
 AC_CONFIG_SRCDIR([src/daemon/main.c])
 AC_CONFIG_MACRO_DIR([m4])
 AC_CONFIG_HEADERS([config.h])
@@ -123,7 +123,6 @@ AC_MSG_CHECKING([host operating system])
 case "$host_os" in
     linux*)
         AC_MSG_RESULT([linux])
-        host_has_caps=1
         os_is_linux=1
     ;;
     freebsd*)
@@ -620,6 +619,9 @@ AS_IF([test "x$enable_memfd" = "xyes" &&
 AS_IF([test "x$HAVE_MEMFD" = "x1"],
     AC_CHECK_FUNCS([memfd_create]))
 
+AS_IF([test "x$HAVE_MEMFD" = "x1"],
+    AC_CHECK_FUNCS([memfd_create]))
+
 AC_SUBST(HAVE_MEMFD)
 AM_CONDITIONAL([HAVE_MEMFD], [test "x$HAVE_MEMFD" = x1])
 AS_IF([test "x$HAVE_MEMFD" = "x1"], AC_DEFINE([HAVE_MEMFD], 1, [Have memfd shared memory.]))
@@ -1073,7 +1075,7 @@ AS_IF([test "x$HAVE_DBUS" = "x1"], AC_DE
 
 PA_MACHINE_ID="${sysconfdir}/machine-id"
 AX_DEFINE_DIR(PA_MACHINE_ID, PA_MACHINE_ID, [D-Bus machine-id file])
-PA_MACHINE_ID_FALLBACK="${localstatedir}/lib/dbus/machine-id"
+PA_MACHINE_ID_FALLBACK="${localstatedir}/db/dbus/machine-id"
 AX_DEFINE_DIR(PA_MACHINE_ID_FALLBACK, PA_MACHINE_ID_FALLBACK,
 	      [Fallback machine-id file])
 
@@ -1378,9 +1380,9 @@ fi
 
 PA_SYSTEM_RUNTIME_PATH="${localstatedir}/run/pulse"
 AX_DEFINE_DIR(PA_SYSTEM_RUNTIME_PATH, PA_SYSTEM_RUNTIME_PATH, [System runtime dir])
-PA_SYSTEM_CONFIG_PATH="${localstatedir}/lib/pulse"
+PA_SYSTEM_CONFIG_PATH="${localstatedir}/db/pulse"
 AX_DEFINE_DIR(PA_SYSTEM_CONFIG_PATH, PA_SYSTEM_CONFIG_PATH, [System config dir])
-PA_SYSTEM_STATE_PATH="${localstatedir}/lib/pulse"
+PA_SYSTEM_STATE_PATH="${localstatedir}/db/pulse"
 AX_DEFINE_DIR(PA_SYSTEM_STATE_PATH, PA_SYSTEM_STATE_PATH, [System state dir])
 
 PA_BINARY=${bindir}/pulseaudio${EXEEXT}
@@ -1392,8 +1394,9 @@ AX_DEFINE_DIR(PACTL_BINARY, PACTL_BINARY
 AC_SUBST(PA_SOEXT, [.so])
 AC_DEFINE(PA_SOEXT, [".so"], [Shared object extension])
 
-AC_SUBST(pulseconfdir, ["${sysconfdir}/pulse"])
-AX_DEFINE_DIR(PA_DEFAULT_CONFIG_DIR, pulseconfdir, [Location of configuration files])
+AC_SUBST(pulseconfdirreal, ["${sysconfdir}/pulse"])
+AC_SUBST(pulseconfdir, ["${EGDIR}"])
+AX_DEFINE_DIR(PA_DEFAULT_CONFIG_DIR, pulseconfdirreal, [Location of configuration files])
 
 #### Mac OSX specific stuff #####
 
@@ -1410,8 +1413,6 @@ AC_ARG_WITH(mac-sysroot,
     mac_sysroot=$withval)
 
 if test "x$os_is_darwin" = "x1" ; then
-    LDFLAGS="$LDFLAGS -mmacosx-version-min=$mac_version_min"
-    CFLAGS="$CFLAGS -mmacosx-version-min=$mac_version_min"
 
     if test "x$mac_sysroot" != "x" ; then
         LDFLAGS="$LDFLAGS -isysroot $mac_sysroot"
@@ -1481,7 +1482,7 @@ fi
 
 AC_ARG_ENABLE([stream-restore-clear-old-devices],
     AS_HELP_STRING([--enable-stream-restore-clear-old-devices], [Forget per-stream routing settings that have been set before version 14.0. Recommended when using GNOME. See https://gitlab.freedesktop.org/pulseaudio/pulseaudio/-/issues/832]))
-if test "x$enable_stream_restore_clear_old_devices" == "xyes" ; then
+if test "x$enable_stream_restore_clear_old_devices" = "xyes" ; then
     AC_DEFINE(STREAM_RESTORE_CLEAR_OLD_DEVICES, [1], [module-stream-restore: Clear old devices])
 fi
 
@@ -1661,7 +1662,7 @@ AS_IF([test "x$HAVE_ESOUND" = "x1" -a "x
 AS_IF([test "x$HAVE_GCOV" = "x1"], ENABLE_GCOV=yes, ENABLE_GCOV=no)
 AS_IF([test "x$HAVE_LIBCHECK" = "x1"], ENABLE_TESTS=yes, ENABLE_TESTS=no)
 AS_IF([test "x$enable_legacy_database_entry_format" != "xno"], ENABLE_LEGACY_DATABASE_ENTRY_FORMAT=yes, ENABLE_LEGACY_DATABASE_ENTRY_FORMAT=no)
-AS_IF([test "x$enable_stream_restore_clear_old_devices" == "xyes"], ENABLE_STREAM_RESTORE_CLEAR_OLD_DEVICES=yes, ENABLE_STREAM_RESTORE_CLEAR_OLD_DEVICES=no)
+AS_IF([test "x$enable_stream_restore_clear_old_devices" = "xyes"], ENABLE_STREAM_RESTORE_CLEAR_OLD_DEVICES=yes, ENABLE_STREAM_RESTORE_CLEAR_OLD_DEVICES=no)
 
 echo "
  ---{ $PACKAGE_NAME $VERSION }---
